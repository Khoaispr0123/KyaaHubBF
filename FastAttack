local old = game:GetService("ReplicatedStorage").Modules.Net
local attack = old:FindFirstChild("RE/RegisterAttack")
local hit = old:FindFirstChild("RE/RegisterHit")
local Net_upvr = require(game.ReplicatedStorage.Modules.Net)
local registedhit = Net_upvr:RemoteEvent("ReceivedHit")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CombatUtil_upvr = require(ReplicatedStorage_upvr.Modules.CombatUtil)
local IsTransformed_upvr = require(game.ReplicatedStorage.Util.IsTransformed)
local Util_upvr = require(game.ReplicatedStorage.Modules.Util.Util)

--Attack
-- local controlers = require(game:GetService("ReplicatedStorage").Controllers.CombatController)
-- local old;
-- old = hookfunction(CombatUtil_upvr.CreateShootAngles, function(...)
--     for i, v in pairs({...}) do
--         print("I: " .. tostring(i) .. " V: " .. tostring(v) .. " type:" .. typeof(v))
--         wait(1)
--     end
--     local args = {...}
--     -- for i, v in pairs(args[1]) do
--     --     print("I2: " .. tostring(i) .. " V: " .. tostring(v))
--     --     local tableinf = debug.getinfo(v)
--     --     for i2, v2 in pairs(tableinf) do
--     --         print("Info, I: " .. tostring(i2) .. " V: " .. tostring(v2) .. typeof(v2))
--     --     end
--     --     wait(1)
--     -- end
--     return old(...)
-- end)



local old;
old = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method_call = getnamecallmethod()
    if tostring(method_call) == "GetAttribute" then
        local args = {...}
        -- if args[1] == "SpeedMult" then
        --     print("get SpeedMult")
        --     wait()
        --     return 0
        -- end
        if tostring(self) == "SpeedMult" then
            return -math.huge
        end
        for i, v in pairs(args) do
            if tostring(i) == "SpeedMult" or tostring(v) == "SpeedMult" then
                return -math.huge
            end
        end
    end
    return old(self, ...)
end))

function GetNearestEnemies()
    GetDistance = function(v)
        return (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    end
    local en = game.Workspace:WaitForChild("Enemies")
    local hugeint = math.huge
    local localen
    for i, v in pairs(en:GetChildren()) do
        if v.Name ~= "FishBoat" and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v:FindFirstChild("HumanoidRootPart") then
            if GetDistance(v.HumanoidRootPart.CFrame) < hugeint then
                hugeint = GetDistance(v.HumanoidRootPart.CFrame)
                localen = v
            end
        end
    end
    return localen
end
-- task.spawn(function()
--     while task.wait() do
--         local v = GetNearestEnemies()
--         if v then
--             local args = {
--                 [1] = v.HumanoidRootPart.Position,
--                 [2] = {
--                     [1] = v.HumanoidRootPart
--                 }
--             }
            
--             game:GetService("ReplicatedStorage").Modules.Net:FindFirstChild("RE/ShootGunEvent"):FireServer(unpack(args))
--         end
--     end
-- end)
-- local old;
-- old = hookmetamethod(game, "__namecall", function(self, ...)
--     local method_call = getnamecallmethod()
--     local args = {...}
--     if tostring(method_call) == "FireServer" then
--         if string.find(tostring(self):lower(), "shootgunevent") then
--             if GetNearestEnemies() then
--                 local v = GetNearestEnemies()
--                 if typeof(args[1]) == "Vector3" then
--                     args[1] = v.HumanoidRootPart.Position
--                 elseif typeof(args[1]) == "CFrame" then
--                     args[1] = v.HumanoidRootPart.CFrame
--                 end
--                 if type(args[2]) == "table" then
--                     args[2][1] = v.HumanoidRootPart
--                 else
--                     args[2] = v.HumanoidRootPart
--                 end                
--             end
--             return old(self, table.unpack(args))
--         end
--     end
--     return old(self, unpack(args))
-- end)

--[[
local args = {
    [1] = 688195,
    [2] = 1
}

game:GetService("ReplicatedStorage").Remotes.Validator2:FireServer(unpack(args))

local args = {
    [1] = Vector3.new(-13106.408203125, 331.1064453125, -7705.755859375),
    [2] = {
        [1] = workspace.Enemies:FindFirstChild("Forest Pirate").HumanoidRootPart
    }
}

game:GetService("ReplicatedStorage").Modules.Net:FindFirstChild("RE/ShootGunEvent"):FireServer(unpack(args))


]]

getgenv().GetDistance = function(v)
    return (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
end

-- pcall(function()
require(game:GetService("ReplicatedStorage").Modules.CombatUtil).IsGunReloading = function()
   return false 
end
    require(game:GetService("ReplicatedStorage").Modules.CombatUtil).CanCharacterMeleeAoe = newcclosure(function()
        return true
    end)
    require(game:GetService("ReplicatedStorage").Modules.CombatUtil).GetComboPaddingTime = newcclosure(function()
        return 0
    end)
    require(game:GetService("ReplicatedStorage").Modules.CombatUtil).GetDefaultAOEDelay = newcclosure(function()
        return 0
    end)
    require(game:GetService("ReplicatedStorage").Modules.CombatUtil).GetAttackCancelMultiplier = newcclosure(function()
        return 0
    end)
    require(game:GetService("ReplicatedStorage").Modules.CombatUtil).CanAttack = newcclosure(function()
        return true
    end)

-- end)
-- local a      = require(workspace.Characters.Nkhangcombat1.Godhuman.Data)
-- a.Cooldown.Z = 0.1
--     a.Cooldown.X = 0.1
--     a.Cooldown.C = 0.1
--     a.Cap        = 0

--[[
local args = {
    [1] = Vector3.new(-1314.6483154296875, 26.49282455444336, -14433.8134765625),
    [2] = {
        [1] = workspace.Enemies:FindFirstChild("Candy Pirate").BrownWildMonkHair.Handle
    }
}

game:GetService("ReplicatedStorage").Modules.Net:FindFirstChild("RE/ShootGunEvent"):FireServer(unpack(args))


local args = {
    [1] = "Display"
}

game:GetService("Players").LocalPlayer.Character:FindFirstChild("Uncommon Holiday Gift").ConsumeEvent:InvokeServer(unpack(args))
game:GetService("Players").LocalPlayer.Character:FindFirstChild("Uncommon Holiday Gift").ConsumeEvent:InvokeServer()

]]

getgenv().GetDistance = function(v)
    return (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
end

getgenv().getnameweapon = function()
    local plr = game.Players.LocalPlayer
    local char = plr.Character
    if char:FindFirstChild("EquippedWeapon") then
        for i, v in pairs(char:GetChildren()) do
            if v:IsA("Tool") then
                return v.Name
            end
        end
    end
    return
end
GetDistance = function(v)
    return (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
end
getgenv().GetBladeHits = function()
    local yourmom = {}
    GetDistance = function(v)
        return (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    end
    for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
        if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Head") and v:FindFirstChild("Humanoid") then
            if GetDistance(v.HumanoidRootPart.CFrame) < 60 then
                table.insert(yourmom, v)
            end
        end
    end
    return yourmom
end
-- local old;
-- old = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
--     local method_call = getnamecallmethod()
--     if tostring(method_call) == "GetAttribute" then
--         local args = {...}
--         -- if args[1] == "SpeedMult" then
--         --     print("get SpeedMult")
--         --     wait()
--         --     return 0
--         -- end
--         if tostring(self) == "SpeedMult" then
--             return 1000
--         end
--         for i, v in pairs(args) do
--             if tostring(i) == "SpeedMult" or tostring(v) == "SpeedMult" then
--                 return 1000
--             end
--         end
--     end
--     return old(self, ...)
-- end))

getgenv().Attack = function()
    -- rewrite
    if #GetBladeHits() > 0 then
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/RegisterAttack"):FireServer(-math.huge)
        local args = {}
        args[1] = nil;
        args[2] = {}
        for i, v in pairs(GetBladeHits()) do
            if not args[1] then
                args[1] = v.Head
            end
            args[2][i] = {
                [1] = v,
                [2] = v.HumanoidRootPart
            }
        end
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/RegisterHit"):FireServer(unpack(args))
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/RegisterAttack"):FireServer(-math.huge)
    end
end

spawn(function()
    while task.wait() do
        Attack()
    end
end)
