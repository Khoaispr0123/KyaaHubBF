local TweenService = game:GetService("TweenService")
local rep = game:GetService("ReplicatedStorage")
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hum = char:WaitForChild("Humanoid")

local Enemies = game.workspace.Enemies:GetChildren()
local speed = 250
-- fast attack
local old = game:GetService("ReplicatedStorage").Modules.Net
local attack = old:FindFirstChild("RE/RegisterAttack")
local hit = old:FindFirstChild("RE/RegisterHit")

local Net_upvr = require(rep.Modules:FindFirstChild("Net"))
local registedhit = Net_upvr:RemoteEvent("ReceivedHit")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CombatUtil_upvr = require(ReplicatedStorage_upvr.Modules.CombatUtil)
local IsTransformed_upvr = require(game.ReplicatedStorage.Util.IsTransformed)
local Util_upvr = require(game.ReplicatedStorage.Modules.Util.Util)

--Attack
-- local controlers = require(game:GetService("ReplicatedStorage").Controllers.CombatController)
-- local old;
-- old = hookfunction(CombatUtil_upvr.CreateShootAngles, function(...)
--     for i, v in pairs({...}) do
--         print("I: " .. tostring(i) .. " V: " .. tostring(v) .. " type:" .. typeof(v))
--         wait(1)
--     end
--     local args = {...}
--     -- for i, v in pairs(args[1]) do
--     --     print("I2: " .. tostring(i) .. " V: " .. tostring(v))
--     --     local tableinf = debug.getinfo(v)
--     --     for i2, v2 in pairs(tableinf) do
--     --         print("Info, I: " .. tostring(i2) .. " V: " .. tostring(v2) .. typeof(v2))
--     --     end
--     --     wait(1)
--     -- end
--     return old(...)
-- end)



local old;
old = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method_call = getnamecallmethod()
    if tostring(method_call) == "GetAttribute" then
        local args = {...}
        -- if args[1] == "SpeedMult" then
        --     print("get SpeedMult")
        --     wait()
        --     return 0
        -- end
        if tostring(self) == "SpeedMult" then
            return -math.huge
        end
        for i, v in pairs(args) do
            if tostring(i) == "SpeedMult" or tostring(v) == "SpeedMult" then
                return -math.huge
            end
        end
    end
    return old(self, ...)
end))

function GetNearestEnemies()
    GetDistance = function(v)
        return (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    end
    local en = game.Workspace:WaitForChild("Enemies")
    local hugeint = math.huge
    local localen
    for i, v in pairs(en:GetChildren()) do
        if v.Name ~= "FishBoat" and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v:FindFirstChild("HumanoidRootPart") then
            if GetDistance(v.HumanoidRootPart.CFrame) < hugeint then
                hugeint = GetDistance(v.HumanoidRootPart.CFrame)
                localen = v
            end
        end
    end
    return localen
end
-- task.spawn(function()
--     while task.wait() do
--         local v = GetNearestEnemies()
--         if v then
--             local args = {
--                 [1] = v.HumanoidRootPart.Position,
--                 [2] = {
--                     [1] = v.HumanoidRootPart
--                 }
--             }
            
--             game:GetService("ReplicatedStorage").Modules.Net:FindFirstChild("RE/ShootGunEvent"):FireServer(unpack(args))
--         end
--     end
-- end)
-- local old;
-- old = hookmetamethod(game, "__namecall", function(self, ...)
--     local method_call = getnamecallmethod()
--     local args = {...}
--     if tostring(method_call) == "FireServer" then
--         if string.find(tostring(self):lower(), "shootgunevent") then
--             if GetNearestEnemies() then
--                 local v = GetNearestEnemies()
--                 if typeof(args[1]) == "Vector3" then
--                     args[1] = v.HumanoidRootPart.Position
--                 elseif typeof(args[1]) == "CFrame" then
--                     args[1] = v.HumanoidRootPart.CFrame
--                 end
--                 if type(args[2]) == "table" then
--                     args[2][1] = v.HumanoidRootPart
--                 else
--                     args[2] = v.HumanoidRootPart
--                 end                
--             end
--             return old(self, table.unpack(args))
--         end
--     end
--     return old(self, unpack(args))
-- end)

--[[
local args = {
    [1] = 688195,
    [2] = 1
}

game:GetService("ReplicatedStorage").Remotes.Validator2:FireServer(unpack(args))

local args = {
    [1] = Vector3.new(-13106.408203125, 331.1064453125, -7705.755859375),
    [2] = {
        [1] = workspace.Enemies:FindFirstChild("Forest Pirate").HumanoidRootPart
    }
}

game:GetService("ReplicatedStorage").Modules.Net:FindFirstChild("RE/ShootGunEvent"):FireServer(unpack(args))


]]

getgenv().GetDistance = function(v)
    return (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
end

-- pcall(function()
require(game:GetService("ReplicatedStorage").Modules.CombatUtil).IsGunReloading = function()
   return false 
end
    require(game:GetService("ReplicatedStorage").Modules.CombatUtil).CanCharacterMeleeAoe = newcclosure(function()
        return true
    end)
    require(game:GetService("ReplicatedStorage").Modules.CombatUtil).GetComboPaddingTime = newcclosure(function()
        return 0
    end)
    require(game:GetService("ReplicatedStorage").Modules.CombatUtil).GetDefaultAOEDelay = newcclosure(function()
        return 0
    end)
    require(game:GetService("ReplicatedStorage").Modules.CombatUtil).GetAttackCancelMultiplier = newcclosure(function()
        return 0
    end)
    require(game:GetService("ReplicatedStorage").Modules.CombatUtil).CanAttack = newcclosure(function()
        return true
    end)

-- end)
-- local a      = require(workspace.Characters.Nkhangcombat1.Godhuman.Data)
-- a.Cooldown.Z = 0.1
--     a.Cooldown.X = 0.1
--     a.Cooldown.C = 0.1
--     a.Cap        = 0

--[[
local args = {
    [1] = Vector3.new(-1314.6483154296875, 26.49282455444336, -14433.8134765625),
    [2] = {
        [1] = workspace.Enemies:FindFirstChild("Candy Pirate").BrownWildMonkHair.Handle
    }
}

game:GetService("ReplicatedStorage").Modules.Net:FindFirstChild("RE/ShootGunEvent"):FireServer(unpack(args))


local args = {
    [1] = "Display"
}

game:GetService("Players").LocalPlayer.Character:FindFirstChild("Uncommon Holiday Gift").ConsumeEvent:InvokeServer(unpack(args))
game:GetService("Players").LocalPlayer.Character:FindFirstChild("Uncommon Holiday Gift").ConsumeEvent:InvokeServer()

]]

getgenv().GetDistance = function(v)
    return (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
end

getgenv().getnameweapon = function()
    local plr = game.Players.LocalPlayer
    local char = plr.Character
    if char:FindFirstChild("EquippedWeapon") then
        for i, v in pairs(char:GetChildren()) do
            if v:IsA("Tool") then
                return v.Name
            end
        end
    end
    return
end
GetDistance = function(v)
    return (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
end
getgenv().GetBladeHits = function()
    local yourmom = {}
    GetDistance = function(v)
        return (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    end
    for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
        if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Head") and v:FindFirstChild("Humanoid") then
            if GetDistance(v.HumanoidRootPart.CFrame) < 60 then
                table.insert(yourmom, v)
            end
        end
    end
    return yourmom
end
-- local old;
-- old = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
--     local method_call = getnamecallmethod()
--     if tostring(method_call) == "GetAttribute" then
--         local args = {...}
--         -- if args[1] == "SpeedMult" then
--         --     print("get SpeedMult")
--         --     wait()
--         --     return 0
--         -- end
--         if tostring(self) == "SpeedMult" then
--             return 1000
--         end
--         for i, v in pairs(args) do
--             if tostring(i) == "SpeedMult" or tostring(v) == "SpeedMult" then
--                 return 1000
--             end
--         end
--     end
--     return old(self, ...)
-- end))

getgenv().Attack = function()
    -- rewrite
    if #GetBladeHits() > 0 then
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/RegisterAttack"):FireServer(-math.huge)
        local args = {}
        args[1] = nil;
        args[2] = {}
        for i, v in pairs(GetBladeHits()) do
            if not args[1] then
                args[1] = v.Head
            end
            args[2][i] = {
                [1] = v,
                [2] = v.HumanoidRootPart
            }
        end
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/RegisterHit"):FireServer(unpack(args))
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/RegisterAttack"):FireServer(-math.huge)
    end
end

spawn(function()
    while task.wait() do
        Attack()
    end
end)

local function  moveEnemies()
    if Enemies:IsA("Model") and Enemies:FindFirstChild("Humanoid") and Enemies:FindFirstChild("HumanoidRootPart") then
        local humanoid = Enemies.Humanoid
        local rootPart = Enemies.HumanoidRootPart

        -- Kiểm tra nếu máu = 0 thì không di chuyển con này
        if humanoid.Health <= 0 then
            return
        end

        local distance = math.random(100, 500) -- Khoảng cách ngẫu nhiên
        local time = distance / speed -- Tính thời gian dựa trên tốc độ

        local tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
        local goal = {Position = rootPart.Position + Vector3.new(distance, 0, 0)}

        local tween = TweenService:Create(rootPart, tweenInfo, goal)
        tween:Play()

        -- Khi Tween hoàn thành, tiếp tục tìm quái mới để di chuyển
        tween.Completed:Connect(function()
            chooseNextEnemies()
        end)
    end
end

-- Chọn quái mới để di chuyển
function chooseNextEnemies()
    for _, Enemies in pairs(Enemies) do
        if Enemies:IsA("Model") and Enemies:FindFirstChild("Humanoid") then
            if Enemies.Humanoid.Health > 0 then
                moveEnemies(Enemies)
                return -- Dừng vòng lặp sau khi chọn một quái hợp lệ
            end
        end
    end
end


local melee = player.BackPack:WaitForChild("Combat")

-- Table of colours to choose from
local colourTable = {
    Green = Color3.fromRGB(0, 255, 0),
    Blue = Color3.fromRGB(0, 0, 255),
    Red = Color3.fromRGB(255, 0, 0),
    Yellow = Color3.fromRGB(255, 255, 0),
    Orange = Color3.fromRGB(255, 165, 0),
    Purple = Color3.fromRGB(128, 0, 128)
}
local colourChosen  -- Change "Red" to whatever colour you like from the table above, feel free to add other colours as well.
_G.ESPToggle = false -- This is the variable used for enabling/disabling ESP. If you are using a GUI library, or your own custom GUI, then set this variable to the callback function. 

-- Services and lp
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local function getCharacter(player)
    return Workspace:FindFirstChild(player.Name)
end

-- Add highlights to players
local function addHighlightToCharacter(player, character)
    if player == LocalPlayer then return end  -- Skip local player
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart and not humanoidRootPart:FindFirstChild("Highlight") then
        local highlightClone = Instance.new("Highlight")  -- Create a new Highlight instance
        highlightClone.Name = "Highlight"
        highlightClone.Adornee = character
        highlightClone.Parent = humanoidRootPart
        highlightClone.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlightClone.FillColor = colourChosen
        highlightClone.OutlineColor = Color3.fromRGB(255, 255, 255)
        highlightClone.FillTransparency = 0.5
    end
end

-- Remove highlights from player
local function removeHighlightFromCharacter(character)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        local highlightInstance = humanoidRootPart:FindFirstChild("Highlight")
        if highlightInstance then
            highlightInstance:Destroy()
        end
    end
end

-- Function to update highlights based on the value of _G.ESPToggle
local function updateHighlights()
    for _, player in pairs(Players:GetPlayers()) do
        local character = getCharacter(player)
        if character then
            if _G.ESPToggle then
                addHighlightToCharacter(player, character)
            else
                removeHighlightFromCharacter(character)
            end
        end
    end
end

-- Connect events through RenderStepped to loop
RunService.RenderStepped:Connect(function()
    updateHighlights()
end)

-- Add highlight to joining players
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if _G.ESPToggle then
            addHighlightToCharacter(player, character)
        end
    end)
end)

-- Remove highlights from leaving players
Players.PlayerRemoving:Connect(function(playerRemoved)
    local character = playerRemoved.Character
    if character then
        removeHighlightFromCharacter(character)
    end
end)

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Kyaa Hub",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Kyaa Hub",
   LoadingSubtitle = "by @kyaanguyen",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Kyaa Hub",
      Subtitle = "Key System",
      Note = "What is 1+1?", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"2"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Main","rewind")
local player = Window:CreateTab("Player","player")

local FarmSection = MainTab:CreateSection("Farm")

local Divider = MainTab:CreateDivider()

Divider:Set(false) -- Whether the divider's visibility is to be set to true or false.

local ToggleFarm = MainTab:CreateToggle({
   Name = "Toggle Example",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        if Value then
          hum:EquidTool(melee)
          chooseNextMonster()
        end
   end,
})
